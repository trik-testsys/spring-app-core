name: Patch Version Update (Manual)

on:
  workflow_dispatch: 

jobs:
  build:
    uses: ./.github/workflows/build.yml

  compute-versions:
    runs-on: ubuntu-latest
    needs: build
    outputs:
      base: ${{ steps.compute-release.outputs.base }}
      release: ${{ steps.compute-release.outputs.release }}
      next-snap: ${{ steps.compute-next-snap.outputs.next-snap }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Compute release version
        id: compute-release
        run: |
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          BASE_VERSION=$(echo "$CURRENT_VERSION" | sed 's/-SNAPSHOT$//')
          RELEASE_VERSION="${BASE_VERSION}.RELEASE"
          
          echo "release=$RELEASE_VERSION" >> $GITHUB_OUTPUT
          echo "base=$BASE_VERSION" >> $GITHUB_OUTPUT

      - name: Compute next snapshot version
        id: compute-next-snap
        run: |
          IFS='.' read -ra VERSION_PARTS <<< "${{ steps.compute-release.outputs.base }}"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          PATCH="${VERSION_PARTS[2]}"
          
          NEW_PATCH=$((PATCH + 1))
          NEXT_SNAPSHOT="${MAJOR}.${MINOR}.${NEW_PATCH}-SNAPSHOT"
          
          echo "next-snap=$NEXT_SNAPSHOT" >> $GITHUB_OUTPUT
          
  compute-patch-branch:
    runs-on: ubuntu-latest
    needs: compute-versions
    outputs: 
      patch-branch: ${{ steps.compute-patch-branch-name.outputs.patch-branch }}

    steps:
      - uses: actions/checkout@v4
      
      - name: Compute patch branch name
        id: compute-patch-branch-name
        run: |
          IFS='.' read -ra VERSION_PARTS <<< "${{ needs.compute-versions.outputs.base }}"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          
          PATCH_BRANCH_NAME="patch/${MAJOR}.${MINOR}"
          echo "patch-branch=$PATCH_BRANCH_NAME" >> $GITHUB_OUTPUT

  update-project-version:
    runs-on: ubuntu-latest
    needs: [ compute-versions, compute-patch-branch ]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.compute-patch-branch.outputs.patch-branch }}
          token: ${{ secrets.PAT }}

      - uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Replace all %CURRENT_VERSION% placeholders and push if found
        run: |
          files=$(grep -rl '%CURRENT_VERSION%' **/src/ || true)
          if [ -n "$files" ]; then
            echo "$files" | xargs sed -i "s/%CURRENT_VERSION%/${{ needs.compute-versions.outputs.base }}/g"
          
            git add .
            git commit -m "[patch] Replaced all %CURRENT_VERSION% to ${{ needs.compute-versions.outputs.base }}"
            git push origin ${{ needs.compute-patch-branch.outputs.patch-branch }}
          else
            echo "No %CURRENT_VERSION% placeholders found. Skipping push."
          fi

      - name: Update project version to release
        run: |
          mvn versions:set -DnewVersion="${{ needs.compute-versions.outputs.release }}" -DgenerateBackupPoms=false
          
          git add .
          git commit -m "[patch] Updated project version to ${{ needs.compute-versions.outputs.release }}"
          git push origin ${{ needs.compute-patch-branch.outputs.patch-branch }}
          
  create-release:
    runs-on: ubuntu-latest
    needs: [ compute-versions, update-project-version, compute-patch-branch ]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.compute-patch-branch.outputs.patch-branch }}
          token: ${{ secrets.PAT }}

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Create and push release tag
        run: |
          git tag -a "v${{ needs.compute-versions.outputs.base }}" -m "Release ${{ needs.compute-versions.outputs.release }}"
          git push origin "v${{ needs.compute-versions.outputs.base }}"

  update-project-next-version:
    runs-on: ubuntu-latest
    needs: [ compute-versions, create-release, compute-patch-branch ]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.compute-patch-branch.outputs.patch-branch }}
          token: ${{ secrets.PAT }}

      - uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Update version to next snapshot
        run: |
          mvn versions:set -DnewVersion="${{ needs.compute-versions.outputs.next-snap }}" -DgenerateBackupPoms=false

      - name: Commit and push
        run: |
          git add .
          git commit -m "[patch] Updated project version to ${{ needs.compute-versions.outputs.next-snap }} for next development cycle"
          git push origin ${{ needs.compute-patch-branch.outputs.patch-branch }}
